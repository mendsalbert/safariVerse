{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-0b5c7b16db0c4438ab8e1da5f0cd82230831ba7e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SafariMart.sol": "project/contracts/SafariMart.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/SafariMart.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\ncontract SafariMart is Ownable, ReentrancyGuard, Pausable {\n    struct Product {\n        uint256 productId;\n        string fileUrl;         // URL to .glb file (S3/IPFS/Arweave)\n        string title;           // Product title\n        string description;     // Product description\n        string category;        // Product category (e.g., \"animals\", \"artifacts\", \"environment\")\n        uint256 price;          // Price in wei\n        address creator;        // Product creator\n        bool isActive;          // Whether product is available for purchase\n        uint64 createdAt;       // Creation timestamp\n        uint256 totalSales;     // Total number of sales\n        uint256 totalRevenue;   // Total revenue generated\n    }\n\n    struct Purchase {\n        uint256 purchaseId;\n        uint256 productId;\n        address buyer;\n        uint256 pricePaid;\n        uint64 purchasedAt;\n    }\n\n    uint256 private _nextProductId;\n    uint256 private _nextPurchaseId;\n    \n    // Platform fee percentage (in basis points, e.g., 250 = 2.5%)\n    uint256 public platformFeePercent = 250; // 2.5%\n    address public feeRecipient;\n\n    // productId => Product data\n    mapping(uint256 => Product) private _products;\n    \n    // creator => productIds created by that address\n    mapping(address => uint256[]) private _createdBy;\n    \n    // buyer => purchaseIds made by that buyer\n    mapping(address => uint256[]) private _purchasesByBuyer;\n    \n    // productId => purchaseIds for that product\n    mapping(uint256 => uint256[]) private _purchasesByProduct;\n    \n    // purchaseId => Purchase data\n    mapping(uint256 => Purchase) private _purchases;\n    \n    // buyer => productId => whether buyer has purchased this product\n    mapping(address => mapping(uint256 => bool)) private _hasPurchased;\n\n    // Events\n    event ProductListed(\n        uint256 indexed productId,\n        address indexed creator,\n        string title,\n        uint256 price,\n        string category\n    );\n\n    event ProductUpdated(\n        uint256 indexed productId,\n        string title,\n        uint256 price,\n        bool isActive\n    );\n\n    event ProductPurchased(\n        uint256 indexed purchaseId,\n        uint256 indexed productId,\n        address indexed buyer,\n        uint256 pricePaid,\n        address creator\n    );\n\n    event PlatformFeeUpdated(uint256 newFeePercent);\n    event FeeRecipientUpdated(address newFeeRecipient);\n\n    constructor(address initialOwner, address _feeRecipient) \n        Ownable(initialOwner) \n    {\n        feeRecipient = _feeRecipient;\n        _nextProductId = 1;\n        _nextPurchaseId = 1;\n    }\n\n    // List a new product\n    function listProduct(\n        string calldata fileUrl,\n        string calldata title,\n        string calldata description,\n        string calldata category,\n        uint256 price\n    ) external whenNotPaused returns (uint256 productId) {\n        require(bytes(fileUrl).length > 0, \"SafariMart: fileUrl required\");\n        require(bytes(title).length > 0, \"SafariMart: title required\");\n        require(price > 0, \"SafariMart: price must be greater than 0\");\n\n        productId = _nextProductId++;\n\n        _products[productId] = Product({\n            productId: productId,\n            fileUrl: fileUrl,\n            title: title,\n            description: description,\n            category: category,\n            price: price,\n            creator: msg.sender,\n            isActive: true,\n            createdAt: uint64(block.timestamp),\n            totalSales: 0,\n            totalRevenue: 0\n        });\n\n        _createdBy[msg.sender].push(productId);\n\n        emit ProductListed(productId, msg.sender, title, price, category);\n    }\n\n    // Update product details (only creator can update)\n    function updateProduct(\n        uint256 productId,\n        string calldata title,\n        string calldata description,\n        uint256 price,\n        bool isActive\n    ) external {\n        Product storage product = _products[productId];\n        require(product.creator != address(0), \"SafariMart: product does not exist\");\n        require(product.creator == msg.sender, \"SafariMart: only creator can update\");\n        require(price > 0, \"SafariMart: price must be greater than 0\");\n\n        if (bytes(title).length > 0) {\n            product.title = title;\n        }\n        if (bytes(description).length > 0) {\n            product.description = description;\n        }\n        product.price = price;\n        product.isActive = isActive;\n\n        emit ProductUpdated(productId, title, price, isActive);\n    }\n\n    // Purchase a product - MVP version with relaxed payment validation\n    function purchaseProduct(uint256 productId) \n        external \n        payable \n        nonReentrant \n        whenNotPaused \n        returns (uint256 purchaseId) \n    {\n        Product storage product = _products[productId];\n        require(product.creator != address(0), \"SafariMart: product does not exist\");\n        require(product.isActive, \"SafariMart: product not available\");\n        \n        // MVP: Accept any payment amount (including 0) for testing\n        // require(msg.value >= product.price, \"SafariMart: insufficient payment\");\n\n        purchaseId = _nextPurchaseId++;\n\n        // Use the actual price paid or the listed price if no payment sent\n        uint256 actualPrice = msg.value > 0 ? msg.value : product.price;\n\n        _purchases[purchaseId] = Purchase({\n            purchaseId: purchaseId,\n            productId: productId,\n            buyer: msg.sender,\n            pricePaid: actualPrice,\n            purchasedAt: uint64(block.timestamp)\n        });\n\n        // Update product stats\n        product.totalSales++;\n        product.totalRevenue += actualPrice;\n\n        // Update buyer records\n        _purchasesByBuyer[msg.sender].push(purchaseId);\n        _purchasesByProduct[productId].push(purchaseId);\n        _hasPurchased[msg.sender][productId] = true;\n\n        // Only process payments if value was actually sent\n        if (msg.value > 0) {\n            // Calculate platform fee and creator payment\n            uint256 platformFee = (msg.value * platformFeePercent) / 10000;\n            uint256 creatorPayment = msg.value - platformFee;\n\n            // Transfer payments\n            if (platformFee > 0 && feeRecipient != address(0)) {\n                payable(feeRecipient).transfer(platformFee);\n            }\n            payable(product.creator).transfer(creatorPayment);\n\n            // Refund excess payment\n            if (msg.value > product.price) {\n                payable(msg.sender).transfer(msg.value - product.price);\n            }\n        }\n\n        emit ProductPurchased(purchaseId, productId, msg.sender, actualPrice, product.creator);\n    }\n\n    // View functions\n    function getProduct(uint256 productId) external view returns (Product memory) {\n        require(_products[productId].creator != address(0), \"SafariMart: product does not exist\");\n        return _products[productId];\n    }\n\n    function getProductsByCreator(address creator) external view returns (uint256[] memory) {\n        return _createdBy[creator];\n    }\n\n    function getMyProducts() external view returns (uint256[] memory) {\n        return _createdBy[msg.sender];\n    }\n\n    function getPurchasesByBuyer(address buyer) external view returns (uint256[] memory) {\n        return _purchasesByBuyer[buyer];\n    }\n\n    function getMyPurchases() external view returns (uint256[] memory) {\n        return _purchasesByBuyer[msg.sender];\n    }\n\n    function getPurchase(uint256 purchaseId) external view returns (Purchase memory) {\n        require(_purchases[purchaseId].buyer != address(0), \"SafariMart: purchase does not exist\");\n        return _purchases[purchaseId];\n    }\n\n    function hasPurchased(address buyer, uint256 productId) external view returns (bool) {\n        return _hasPurchased[buyer][productId];\n    }\n\n    function nextProductId() external view returns (uint256) {\n        return _nextProductId;\n    }\n\n    function nextPurchaseId() external view returns (uint256) {\n        return _nextPurchaseId;\n    }\n\n    // Get all active products (for marketplace browsing)\n    function getAllActiveProducts() external view returns (Product[] memory) {\n        uint256 activeCount = 0;\n        \n        // First pass: count active products\n        for (uint256 i = 1; i < _nextProductId; i++) {\n            if (_products[i].creator != address(0) && _products[i].isActive) {\n                activeCount++;\n            }\n        }\n        \n        // Second pass: collect active products\n        Product[] memory activeProducts = new Product[](activeCount);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 1; i < _nextProductId; i++) {\n            if (_products[i].creator != address(0) && _products[i].isActive) {\n                activeProducts[currentIndex] = _products[i];\n                currentIndex++;\n            }\n        }\n        \n        return activeProducts;\n    }\n\n    // Get products by category\n    function getProductsByCategory(string calldata category) external view returns (Product[] memory) {\n        uint256 categoryCount = 0;\n        \n        // First pass: count products in category\n        for (uint256 i = 1; i < _nextProductId; i++) {\n            if (_products[i].creator != address(0) && \n                _products[i].isActive && \n                keccak256(bytes(_products[i].category)) == keccak256(bytes(category))) {\n                categoryCount++;\n            }\n        }\n        \n        // Second pass: collect products in category\n        Product[] memory categoryProducts = new Product[](categoryCount);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 1; i < _nextProductId; i++) {\n            if (_products[i].creator != address(0) && \n                _products[i].isActive && \n                keccak256(bytes(_products[i].category)) == keccak256(bytes(category))) {\n                categoryProducts[currentIndex] = _products[i];\n                currentIndex++;\n            }\n        }\n        \n        return categoryProducts;\n    }\n\n    // Admin functions\n    function setPlatformFee(uint256 newFeePercent) external onlyOwner {\n        require(newFeePercent <= 1000, \"SafariMart: fee cannot exceed 10%\"); // Max 10%\n        platformFeePercent = newFeePercent;\n        emit PlatformFeeUpdated(newFeePercent);\n    }\n\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\n        require(newFeeRecipient != address(0), \"SafariMart: invalid fee recipient\");\n        feeRecipient = newFeeRecipient;\n        emit FeeRecipientUpdated(newFeeRecipient);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // Emergency withdrawal (only owner)\n    function emergencyWithdraw() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"SafariMart: no funds to withdraw\");\n        payable(owner()).transfer(balance);\n    }\n\n    // Get creator's product data with full details\n    function getCreatorProductsWithData(address creator) \n        external \n        view \n        returns (uint256[] memory productIds, Product[] memory products) \n    {\n        return _getCreatorProductsWithData(creator);\n    }\n\n    // Get my products with full data\n    function getMyProductsWithData() \n        external \n        view \n        returns (uint256[] memory productIds, Product[] memory products) \n    {\n        return _getCreatorProductsWithData(msg.sender);\n    }\n\n    // Internal helper function\n    function _getCreatorProductsWithData(address creator) \n        internal \n        view \n        returns (uint256[] memory productIds, Product[] memory products) \n    {\n        uint256[] memory ids = _createdBy[creator];\n        Product[] memory data = new Product[](ids.length);\n        \n        for (uint256 i = 0; i < ids.length; i++) {\n            data[i] = _products[ids[i]];\n        }\n        \n        return (ids, data);\n    }\n\n    // Get purchase history with product details for a buyer\n    function getPurchaseHistoryWithDetails(address buyer) \n        external \n        view \n        returns (Purchase[] memory purchases, Product[] memory products) \n    {\n        uint256[] memory purchaseIds = _purchasesByBuyer[buyer];\n        Purchase[] memory purchaseData = new Purchase[](purchaseIds.length);\n        Product[] memory productData = new Product[](purchaseIds.length);\n        \n        for (uint256 i = 0; i < purchaseIds.length; i++) {\n            Purchase memory purchase = _purchases[purchaseIds[i]];\n            purchaseData[i] = purchase;\n            productData[i] = _products[purchase.productId];\n        }\n        \n        return (purchaseData, productData);\n    }\n}\n"
      }
    }
  }
}