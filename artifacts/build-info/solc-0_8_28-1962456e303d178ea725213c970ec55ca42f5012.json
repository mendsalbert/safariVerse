{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-1962456e303d178ea725213c970ec55ca42f5012",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SafariVerseMarketplace.sol": "project/contracts/SafariVerseMarketplace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/SafariVerseMarketplace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SafariVerseMarketplace is Ownable, ReentrancyGuard {\n    // Product struct to store marketplace items\n    struct Product {\n        uint256 id;\n        string name;\n        string description;\n        string fileUrl;\n        uint256 price; // Price in wei (HBAR equivalent)\n        address creator;\n        bool isActive;\n        uint256 createdAt;\n        uint256 updatedAt;\n        uint256 itemsSold;\n        uint256 totalRevenue;\n        string category; // e.g., \"3d-model\", \"texture\", \"audio\", etc.\n    }\n\n    // Events\n    event ProductCreated(\n        uint256 indexed productId,\n        address indexed creator,\n        string name,\n        uint256 price\n    );\n    \n    event ProductUpdated(\n        uint256 indexed productId,\n        address indexed creator,\n        string name,\n        uint256 price\n    );\n    \n    event ProductPurchased(\n        uint256 indexed productId,\n        address indexed buyer,\n        address indexed creator,\n        uint256 price,\n        uint256 timestamp\n    );\n    \n    event ProductDeactivated(\n        uint256 indexed productId,\n        address indexed creator\n    );\n\n    // State variables\n    uint256 public nextProductId = 1;\n    mapping(uint256 => Product) public products;\n    mapping(address => uint256[]) public creatorProducts;\n    mapping(address => uint256) public creatorStats; // Total revenue per creator\n    mapping(address => uint256) public creatorItemsSold; // Total items sold per creator\n    \n    // Platform statistics\n    uint256 public totalProducts;\n    uint256 public totalSales;\n    uint256 public totalRevenue;\n    \n    // Platform fee (in basis points, e.g., 250 = 2.5%)\n    uint256 public platformFeeBps = 250; // 2.5% default\n    address public feeRecipient;\n    \n    // Supported payment tokens (if any)\n    mapping(address => bool) public supportedTokens;\n    address public nativeToken; // For HBAR equivalent\n\n    constructor(address _feeRecipient) Ownable(msg.sender) {\n        feeRecipient = _feeRecipient;\n        nativeToken = address(0); // Native token (HBAR equivalent)\n        supportedTokens[nativeToken] = true;\n    }\n\n    // Modifiers\n    modifier onlyProductCreator(uint256 _productId) {\n        require(products[_productId].creator == msg.sender, \"Not the product creator\");\n        _;\n    }\n    \n    modifier productExists(uint256 _productId) {\n        require(_productId > 0 && _productId < nextProductId, \"Product does not exist\");\n        _;\n    }\n    \n    modifier productActive(uint256 _productId) {\n        require(products[_productId].isActive, \"Product is not active\");\n        _;\n    }\n\n    // Create a new product\n    function createProduct(\n        string memory _name,\n        string memory _description,\n        string memory _fileUrl,\n        uint256 _price,\n        string memory _category\n    ) external returns (uint256) {\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_description).length > 0, \"Description cannot be empty\");\n        require(bytes(_fileUrl).length > 0, \"File URL cannot be empty\");\n        require(_price > 0, \"Price must be greater than 0\");\n        require(bytes(_category).length > 0, \"Category cannot be empty\");\n\n        uint256 productId = nextProductId++;\n        \n        products[productId] = Product({\n            id: productId,\n            name: _name,\n            description: _description,\n            fileUrl: _fileUrl,\n            price: _price,\n            creator: msg.sender,\n            isActive: true,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp,\n            itemsSold: 0,\n            totalRevenue: 0,\n            category: _category\n        });\n\n        creatorProducts[msg.sender].push(productId);\n        totalProducts++;\n\n        emit ProductCreated(productId, msg.sender, _name, _price);\n        return productId;\n    }\n\n    // Update an existing product\n    function updateProduct(\n        uint256 _productId,\n        string memory _name,\n        string memory _description,\n        string memory _fileUrl,\n        uint256 _price,\n        string memory _category\n    ) external \n        productExists(_productId)\n        onlyProductCreator(_productId)\n    {\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_description).length > 0, \"Description cannot be empty\");\n        require(bytes(_fileUrl).length > 0, \"File URL cannot be empty\");\n        require(_price > 0, \"Price must be greater than 0\");\n        require(bytes(_category).length > 0, \"Category cannot be empty\");\n\n        Product storage product = products[_productId];\n        product.name = _name;\n        product.description = _description;\n        product.fileUrl = _fileUrl;\n        product.price = _price;\n        product.category = _category;\n        product.updatedAt = block.timestamp;\n\n        emit ProductUpdated(_productId, msg.sender, _name, _price);\n    }\n\n    // Purchase a product\n    function purchaseProduct(uint256 _productId) \n        external \n        payable \n        nonReentrant\n        productExists(_productId)\n        productActive(_productId)\n    {\n        Product storage product = products[_productId];\n        require(msg.value >= product.price, \"Insufficient payment\");\n        require(msg.sender != product.creator, \"Cannot purchase your own product\");\n\n        // Calculate platform fee\n        uint256 platformFee = (product.price * platformFeeBps) / 10000;\n        uint256 creatorPayment = product.price - platformFee;\n\n        // Update product statistics\n        product.itemsSold++;\n        product.totalRevenue += product.price;\n\n        // Update creator statistics\n        creatorStats[product.creator] += creatorPayment;\n        creatorItemsSold[product.creator]++;\n\n        // Update platform statistics\n        totalSales++;\n        totalRevenue += product.price;\n\n        // Transfer payments\n        if (platformFee > 0) {\n            payable(feeRecipient).transfer(platformFee);\n        }\n        payable(product.creator).transfer(creatorPayment);\n\n        // Refund excess payment\n        if (msg.value > product.price) {\n            payable(msg.sender).transfer(msg.value - product.price);\n        }\n\n        emit ProductPurchased(\n            _productId,\n            msg.sender,\n            product.creator,\n            product.price,\n            block.timestamp\n        );\n    }\n\n    // Deactivate a product\n    function deactivateProduct(uint256 _productId) \n        external \n        productExists(_productId)\n        onlyProductCreator(_productId)\n    {\n        products[_productId].isActive = false;\n        emit ProductDeactivated(_productId, msg.sender);\n    }\n\n    // Reactivate a product\n    function reactivateProduct(uint256 _productId) \n        external \n        productExists(_productId)\n        onlyProductCreator(_productId)\n    {\n        products[_productId].isActive = true;\n        products[_productId].updatedAt = block.timestamp;\n    }\n\n    // Get all products by a creator\n    function getCreatorProducts(address _creator) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return creatorProducts[_creator];\n    }\n\n    // Get product details\n    function getProduct(uint256 _productId) \n        external \n        view \n        productExists(_productId)\n        returns (Product memory) \n    {\n        return products[_productId];\n    }\n\n    // Get creator statistics\n    function getCreatorStats(address _creator) \n        external \n        view \n        returns (uint256 creatorRevenue, uint256 itemsSold) \n    {\n        return (creatorStats[_creator], creatorItemsSold[_creator]);\n    }\n\n    // Get platform statistics\n    function getPlatformStats() \n        external \n        view \n        returns (uint256 _totalProducts, uint256 _totalSales, uint256 _totalRevenue) \n    {\n        return (totalProducts, totalSales, totalRevenue);\n    }\n\n    // Get all active products (with pagination)\n    function getActiveProducts(uint256 _offset, uint256 _limit) \n        external \n        view \n        returns (Product[] memory activeProducts, uint256 totalCount) \n    {\n        uint256 count = 0;\n        uint256 activeCount = 0;\n        \n        // First pass: count active products\n        for (uint256 i = 1; i < nextProductId; i++) {\n            if (products[i].isActive) {\n                activeCount++;\n            }\n        }\n        \n        // Second pass: collect active products\n        Product[] memory result = new Product[](_limit);\n        uint256 resultIndex = 0;\n        \n        for (uint256 i = 1; i < nextProductId && resultIndex < _limit; i++) {\n            if (products[i].isActive) {\n                if (count >= _offset) {\n                    result[resultIndex] = products[i];\n                    resultIndex++;\n                }\n                count++;\n            }\n        }\n        \n        return (result, activeCount);\n    }\n\n    // Admin functions\n    function setPlatformFee(uint256 _feeBps) external onlyOwner {\n        require(_feeBps <= 1000, \"Fee cannot exceed 10%\");\n        platformFeeBps = _feeBps;\n    }\n\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\n        feeRecipient = _feeRecipient;\n    }\n\n    function addSupportedToken(address _token) external onlyOwner {\n        supportedTokens[_token] = true;\n    }\n\n    function removeSupportedToken(address _token) external onlyOwner {\n        supportedTokens[_token] = false;\n    }\n\n    // Emergency functions\n    function emergencyWithdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function emergencyWithdrawToken(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).transfer(owner(), _amount);\n    }\n}\n"
      }
    }
  }
}